import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { UsageTrackingService } from '@/lib/usage-tracking-service'
import { ClaudeCodeService } from '@/lib/claude-service'

export interface ClaudeFreemiumConfig {
  projectType: string
  requiresAuth: boolean
  allowSystemKey: boolean
  maxTokens?: number
  estimatedCost?: number
}

export interface ClaudeFreemiumResult {
  canProceed: boolean
  useSystemKey: boolean
  claudeService: ClaudeCodeService | null
  userId: string | null
  error?: string
  remainingProjects?: number
  requestBody?: any
}

/**
 * Middleware to handle Claude freemium limits and key selection
 */
export async function handleClaudeFreemiumRequest(
  request: NextRequest,
  config: ClaudeFreemiumConfig
): Promise<ClaudeFreemiumResult> {
  try {
    const supabase = await createClient()
    const usageTracker = new UsageTrackingService(supabase)
    let userId: string | null = null
    let userClaudeKey: string | null = null

    // Parse request body once here
    let body: any = {}
    try {
      body = await request.json()
    } catch (jsonError) {
      console.error('Error parsing request body:', jsonError)
      return {
        canProceed: false,
        useSystemKey: false,
        claudeService: null,
        userId: null,
        error: 'Invalid JSON in request body',
        requestBody: {}
      }
    }

    // Check authentication if required
    if (config.requiresAuth) {
      const { data: { user }, error: authError } = await supabase.auth.getUser()
      
      if (authError || !user) {
        return {
          canProceed: false,
          useSystemKey: false,
          claudeService: null,
          userId: null,
          error: 'Authentication required',
          requestBody: body
        }
      }
      
      userId = user.id

      // Create user profile if it doesn't exist
      try {
        await usageTracker.upsertUserProfile(
          userId,
          user.email || '',
          user.user_metadata?.full_name,
          user.user_metadata?.avatar_url
        )
      } catch (profileError) {
        console.error('Error creating user profile:', profileError)
        // Continue anyway - profile creation failure shouldn't block the request
      }
    }

    // Get user's Claude key from the parsed body
    userClaudeKey = body.claudeKey || body.anthropicKey

    // Determine key usage strategy
    let useSystemKey = false
    let claudeService: ClaudeCodeService | null = null

    if (userClaudeKey) {
      // User provided their own key - use it directly
      claudeService = new ClaudeCodeService({
        apiKey: userClaudeKey,
        model: body.model || 'claude-3-5-sonnet-20241022',
        maxTokens: config.maxTokens || 8192,
        temperature: body.temperature || 0.1
      })
      useSystemKey = false
    } else if (config.allowSystemKey && userId) {
      // Check if user can use system key (daily limit)
      try {
        const usageStats = await usageTracker.checkDailyLimit(userId)
        
        if (!usageStats.can_create) {
          return {
            canProceed: false,
            useSystemKey: false,
            claudeService: null,
            userId,
            error: `Daily limit exceeded. You've used ${usageStats.projects_today}/${usageStats.daily_limit} free Claude projects today. Please provide your own Claude API key or try again tomorrow.`,
            remainingProjects: usageStats.remaining,
            requestBody: body
          }
        }
      } catch (limitError) {
        console.error('Error checking daily limit:', limitError)
        return {
          canProceed: false,
          useSystemKey: false,
          claudeService: null,
          userId,
          error: 'Unable to check usage limits. Please try again or provide your own Claude API key.',
          requestBody: body
        }
      }

      // Use system key
      const systemKey = process.env.ANTHROPIC_API_KEY
      if (!systemKey) {
        return {
          canProceed: false,
          useSystemKey: false,
          claudeService: null,
          userId,
          error: 'System Claude API key not configured. Please provide your own Claude API key.',
          requestBody: body
        }
      }

      claudeService = new ClaudeCodeService({
        apiKey: systemKey,
        model: body.model || 'claude-3-5-sonnet-20241022',
        maxTokens: config.maxTokens || 8192,
        temperature: body.temperature || 0.1
      })
      useSystemKey = true
    } else {
      return {
        canProceed: false,
        useSystemKey: false,
        claudeService: null,
        userId,
        error: 'Please provide your Claude API key to continue.',
        requestBody: body
      }
    }

    return {
      canProceed: true,
      useSystemKey,
      claudeService,
      userId,
      requestBody: body
    }

  } catch (error) {
    console.error('Error in Claude freemium middleware:', error)
    return {
      canProceed: false,
      useSystemKey: false,
      claudeService: null,
      userId: null,
      error: 'Internal server error'
    }
  }
}

/**
 * Wrapper function to handle Claude freemium logic for API routes
 */
export async function withClaudeFreemium(
  request: NextRequest,
  config: ClaudeFreemiumConfig,
  handler: (result: ClaudeFreemiumResult, usageTracker: UsageTrackingService) => Promise<NextResponse>
): Promise<NextResponse> {
  console.log('🔄 Claude Freemium Middleware started')
  console.log('📝 Config:', JSON.stringify(config, null, 2))
  
  try {
    // Parse request body
    console.log('📋 Parsing request body...')
    const requestBody = await request.json()
    console.log('📋 Request body parsed:', JSON.stringify(requestBody, null, 2))
    
    // Check authentication
    console.log('🔐 Checking authentication...')
    const supabase = await createClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      console.log('❌ Authentication failed:', authError?.message || 'No user')
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
    }
    
    console.log('✅ User authenticated:', user.id)
    
    // Initialize usage tracker
    console.log('📊 Initializing usage tracker...')
    const usageTracker = await UsageTrackingService.createServerInstance()
    
    // Upsert user profile
    console.log('👤 Upserting user profile...')
    await usageTracker.upsertUserProfile(
      user.id,
      user.email || '',
      user.user_metadata?.full_name || '',
      user.user_metadata?.avatar_url || '',
      'user' // Use 'user' role
    )
    
    console.log('✅ User profile upserted successfully')
    
    // Check for user's API key
    console.log('🔑 Checking for user API key...')
    const userClaudeKey = requestBody.claudeKey || requestBody.anthropicKey
    
    if (userClaudeKey) {
      console.log('🔑 Using user-provided API key')
      const claudeService = new ClaudeCodeService({
        apiKey: userClaudeKey,
        model: requestBody.model || 'claude-3-5-sonnet-20241022',
        maxTokens: config.maxTokens || 8192,
        temperature: requestBody.temperature || 0.1
      })
      
      const result: ClaudeFreemiumResult = {
        canProceed: true,
        useSystemKey: false,
        claudeService,
        userId: user.id,
        requestBody
      }
      
      console.log('🎯 Calling handler with user API key...')
      const response = await handler(result, usageTracker)
      console.log('✅ Handler completed successfully')
      return response
    }
    
    // No user API key - check freemium limits
    console.log('🔍 No user API key found, checking freemium limits...')
    const usageStats = await usageTracker.checkDailyLimit(user.id)
    
    if (!usageStats.can_create) {
      console.log('🚫 Freemium limit exceeded')
      return NextResponse.json({
        error: 'Freemium limit exceeded',
        details: `You have used ${usageStats.projects_today}/${usageStats.daily_limit} free projects today. Please provide your Claude API key or upgrade to continue.`,
        usage: usageStats
      }, { status: 429 })
    }
    
    console.log('✅ Freemium limit check passed')
    
    // Use system key
    console.log('🔑 Using system API key...')
    const systemKey = process.env.ANTHROPIC_API_KEY || process.env.OPENAI_API_KEY
    
    if (!systemKey) {
      console.log('❌ No system API key available')
      return NextResponse.json({
        error: 'System API key not configured. Please provide your Claude API key.'
      }, { status: 503 })
    }
    
    const claudeService = new ClaudeCodeService({
      apiKey: systemKey,
      model: requestBody.model || 'claude-3-5-sonnet-20241022',
      maxTokens: config.maxTokens || 8192,
      temperature: requestBody.temperature || 0.1
    })
    
    const result: ClaudeFreemiumResult = {
      canProceed: true,
      useSystemKey: true,
      claudeService,
      userId: user.id,
      requestBody
    }
    
    console.log('🎯 Calling handler with system API key...')
    const response = await handler(result, usageTracker)
    
    // Track usage if successful and using system key
    if (result.useSystemKey && result.userId && response.status === 200) {
      try {
        console.log('📊 Recording project generation...')
        await usageTracker.recordProjectGeneration({
          user_id: result.userId,
          project_type: config.projectType || 'sdlc_generation',
          generation_method: 'system_key',
          ai_provider: 'claude',
          tokens_used: config.maxTokens || 8192,
          cost_estimate: config.estimatedCost || 0.01,
          generation_time_ms: 0, // Will be calculated in the service
          success: true,
          metadata: {}
        })
        console.log('✅ Project generation recorded successfully')
      } catch (trackingError) {
        console.error('❌ Error tracking usage:', trackingError)
        // Don't fail the request for tracking errors
      }
    }
    
    console.log('✅ Handler completed successfully')
    return response
    
  } catch (error) {
    console.error('❌ Claude Freemium Middleware error:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

/**
 * Simple helper to check if user has reached daily limit
 */
export async function checkUserDailyLimit(userId: string): Promise<{
  canCreate: boolean
  remaining: number
  dailyLimit: number
  projectsToday: number
}> {
  try {
    const supabase = await createClient()
    const usageTracker = new UsageTrackingService(supabase)
    const stats = await usageTracker.checkDailyLimit(userId)
    
    return {
      canCreate: stats.can_create,
      remaining: stats.remaining,
      dailyLimit: stats.daily_limit,
      projectsToday: stats.projects_today
    }
  } catch (error) {
    console.error('Error checking daily limit:', error)
    return {
      canCreate: false,
      remaining: 0,
      dailyLimit: 0,
      projectsToday: 0
    }
  }
}

/**
 * Helper to increment user's usage count
 */
export async function incrementUserUsage(
  userId: string,
  projectType: string,
  keyType: 'system_key' | 'user_key',
  tokensUsed: number = 0,
  costEstimate: number = 0
): Promise<void> {
  try {
    const supabase = await createClient()
    const usageTracker = new UsageTrackingService(supabase)
    await usageTracker.recordProjectGeneration({
      user_id: userId,
      project_type: projectType,
      generation_method: keyType,
      ai_provider: 'claude',
      tokens_used: tokensUsed,
      cost_estimate: costEstimate,
      generation_time_ms: 0,
      success: true,
      metadata: {}
    })
  } catch (error) {
    console.error('Error incrementing usage:', error)
  }
}

/**
 * Helper to get user's usage statistics
 */
export async function getUserUsageStats(userId: string): Promise<{
  canCreate: boolean
  remaining: number
  dailyLimit: number
  projectsToday: number
} | null> {
  try {
    const supabase = await createClient()
    const usageTracker = new UsageTrackingService(supabase)
    const stats = await usageTracker.checkDailyLimit(userId)
    
    return {
      canCreate: stats.can_create,
      remaining: stats.remaining,
      dailyLimit: stats.daily_limit,
      projectsToday: stats.projects_today
    }
  } catch (error) {
    console.error('Error getting usage stats:', error)
    return null
  }
} 