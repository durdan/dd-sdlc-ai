name: SDLC.dev Claude Assistant
on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-assist:
    if: contains(github.event.comment.body, '/claude') || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract task from comment
        id: extract
        if: github.event_name == 'issue_comment'
        run: |
          COMMENT="${{ github.event.comment.body }}"
          TASK=$(echo "$COMMENT" | sed 's|/claude ||' | head -1)
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Get repository context
        id: context
        run: |
          # Get basic repo info
          echo "repo_owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "default_branch=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          
          # Get changed files for PR context
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed_files.txt
            echo "changed_files=$(cat changed_files.txt | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          fi

      - name: Call SDLC.dev Platform API
        id: platform
        uses: actions/github-script@v7
        with:
          script: |
            const axios = require('axios');
            
            // Platform API endpoint (users configure this)
            const platformUrl = '${{ secrets.SDLC_PLATFORM_URL }}' || 'https://your-platform-domain.com';
            const userToken = '${{ secrets.SDLC_USER_TOKEN }}'; // User's platform auth token
            
            if (!userToken) {
              core.setFailed('SDLC_USER_TOKEN secret not configured. Please add your SDLC.dev platform token to repository secrets.');
              return;
            }

            const payload = {
              github: {
                repository: '${{ steps.context.outputs.repo_owner }}/${{ steps.context.outputs.repo_name }}',
                event_type: '${{ github.event_name }}',
                actor: '${{ github.actor }}',
                ref: '${{ github.ref }}',
                sha: '${{ github.sha }}',
                issue_number: '${{ steps.extract.outputs.issue_number }}',
                pr_number: '${{ github.event.pull_request.number }}',
                changed_files: '${{ steps.context.outputs.changed_files }}'
              },
              task: {
                type: '${{ github.event_name == "pull_request" && "review" || "custom" }}',
                description: '${{ steps.extract.outputs.task || "Review this pull request" }}',
                context: 'GitHub Actions triggered task'
              }
            };

            try {
              console.log('üöÄ Calling SDLC.dev platform...');
              
              const response = await axios.post(`${platformUrl}/api/github/claude-task`, payload, {
                headers: {
                  'Authorization': `Bearer ${userToken}`,
                  'Content-Type': 'application/json',
                  'User-Agent': 'SDLC.dev-GitHub-Action/1.0'
                },
                timeout: 60000 // 1 minute timeout
              });

              core.setOutput('task_id', response.data.task?.id);
              core.setOutput('status', response.data.status);
              core.setOutput('message', response.data.message);
              
              console.log('‚úÖ Platform responded:', response.data);
              
            } catch (error) {
              console.error('‚ùå Platform API call failed:', error.message);
              core.setFailed(`SDLC.dev platform API call failed: ${error.message}`);
            }

      - name: Wait for platform processing
        id: wait
        if: steps.platform.outputs.task_id
        uses: actions/github-script@v7
        with:
          script: |
            const axios = require('axios');
            const platformUrl = '${{ secrets.SDLC_PLATFORM_URL }}' || 'https://your-platform-domain.com';
            const userToken = '${{ secrets.SDLC_USER_TOKEN }}';
            const taskId = '${{ steps.platform.outputs.task_id }}';
            
            let attempts = 0;
            const maxAttempts = 30; // 5 minutes max
            
            while (attempts < maxAttempts) {
              try {
                const response = await axios.get(`${platformUrl}/api/tasks/${taskId}`, {
                  headers: {
                    'Authorization': `Bearer ${userToken}`,
                    'Content-Type': 'application/json'
                  }
                });
                
                const task = response.data.task;
                console.log(`‚è≥ Task status: ${task.status} (${task.progress}%)`);
                
                if (task.status === 'completed') {
                  core.setOutput('result', JSON.stringify(task.result));
                  core.setOutput('pr_url', task.result?.pull_request?.url);
                  break;
                } else if (task.status === 'failed') {
                  core.setFailed(`Task failed: ${task.error || 'Unknown error'}`);
                  break;
                }
                
                // Wait 10 seconds before next check
                await new Promise(resolve => setTimeout(resolve, 10000));
                attempts++;
                
              } catch (error) {
                console.error(`Error checking task status: ${error.message}`);
                attempts++;
                await new Promise(resolve => setTimeout(resolve, 10000));
              }
            }
            
            if (attempts >= maxAttempts) {
              core.setFailed('Task timed out after 5 minutes');
            }

      - name: Comment result
        if: steps.extract.outputs.issue_number && (success() || failure())
        uses: actions/github-script@v7
        with:
          script: |
            let body = '';
            
            if ('${{ steps.wait.outputs.result }}') {
              const result = JSON.parse('${{ steps.wait.outputs.result }}');
              body = `## ü§ñ Claude AI Assistant (via SDLC.dev)
              
**Task Completed Successfully!**

${result.summary || 'Task completed successfully.'}

${result.pull_request ? `**Pull Request Created:** ${result.pull_request.url}` : ''}

---
*Powered by [SDLC.dev](https://sdlc.dev) Platform*`;
            } else {
              body = `## ‚ùå Claude AI Assistant Failed
              
**Task Status:** Failed

The SDLC.dev platform was unable to complete this task. Please check:
- Your SDLC_USER_TOKEN secret is correctly configured
- Your SDLC_PLATFORM_URL is set (if using custom domain)
- The platform service is operational

---
*Powered by [SDLC.dev](https://sdlc.dev) Platform*`;
            }

            await github.rest.issues.createComment({
              issue_number: ${{ steps.extract.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Comment PR result
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/github-script@v7
        with:
          script: |
            let body = '';
            
            if ('${{ steps.wait.outputs.result }}') {
              const result = JSON.parse('${{ steps.wait.outputs.result }}');
              body = `## ü§ñ Claude AI Code Review (via SDLC.dev)
              
${result.summary || 'Code review completed.'}

**Key Findings:**
${result.findings ? result.findings.map(f => `- ${f}`).join('\n') : '- No issues found'}

---
*Automated review by [SDLC.dev](https://sdlc.dev) Platform*`;
            } else {
              body = `## ‚ùå Claude AI Review Failed
              
The SDLC.dev platform was unable to complete the code review.

---
*Powered by [SDLC.dev](https://sdlc.dev) Platform*`;
            }

            await github.rest.pulls.createReview({
              pull_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
              event: 'COMMENT'
            }); 