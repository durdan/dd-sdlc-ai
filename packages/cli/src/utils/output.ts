import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { marked } from 'marked';
import TerminalRenderer from 'marked-terminal';

// Configure marked for terminal output
marked.setOptions({
  renderer: new TerminalRenderer({
    showSectionPrefix: false,
    width: 80
  }) as any
});

export async function saveDocuments(
  documents: Map<string, any>,
  outputDir: string,
  format: string
): Promise<string[]> {
  const savedFiles: string[] = [];
  const timestamp = new Date().toISOString().split('T')[0];
  const projectName = sanitizeFilename(documents.values().next().value?.title || 'project');
  const projectDir = path.join(outputDir, `${projectName}-${timestamp}`);

  await fs.ensureDir(projectDir);

  for (const [type, data] of documents) {
    const filename = `${type}-spec.${getFileExtension(format)}`;
    const filepath = path.join(projectDir, filename);

    let content = data.content || data;
    
    // Ensure content is a string
    if (typeof content !== 'string') {
      content = JSON.stringify(content, null, 2);
    }

    // Format content based on output format
    switch (format) {
      case 'json':
        content = JSON.stringify(data, null, 2);
        break;
      case 'html':
        content = convertToHtml(content, type);
        break;
      case 'pdf':
        // PDF generation would require additional libraries
        console.log(chalk.yellow(`PDF export not yet implemented, saving as markdown`));
        // Don't change format variable, just save as markdown
        break;
    }

    await fs.writeFile(filepath, content, 'utf-8');
    savedFiles.push(filename);
  }

  // Create index file
  const indexPath = path.join(projectDir, 'README.md');
  const indexContent = createIndexFile(documents, projectName, timestamp);
  await fs.writeFile(indexPath, indexContent, 'utf-8');
  savedFiles.push('README.md');

  return savedFiles;
}

export function formatOutput(content: string, format: 'terminal' | 'file' = 'terminal'): string {
  if (format === 'terminal') {
    // Parse and render markdown for terminal
    return marked(content) as string;
  }
  return content;
}

function sanitizeFilename(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 50);
}

function getFileExtension(format: string): string {
  const extensions: Record<string, string> = {
    markdown: 'md',
    json: 'json',
    html: 'html',
    pdf: 'pdf'
  };
  return extensions[format] || 'md';
}

function convertToHtml(content: string, title: string): string {
  const htmlContent = marked(content);
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title} - SDLC Documentation</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3 {
            color: #2563eb;
        }
        code {
            background: #f3f4f6;
            padding: 2px 6px;
            border-radius: 3px;
        }
        pre {
            background: #1f2937;
            color: #f3f4f6;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
        }
        blockquote {
            border-left: 4px solid #2563eb;
            padding-left: 16px;
            margin-left: 0;
            color: #6b7280;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #e5e7eb;
            padding: 12px;
            text-align: left;
        }
        th {
            background: #f9fafb;
            font-weight: 600;
        }
    </style>
</head>
<body>
    ${htmlContent}
    <footer style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px;">
        Generated by SDLC AI Platform CLI â€¢ ${new Date().toLocaleString()}
    </footer>
</body>
</html>`;
}

function createIndexFile(documents: Map<string, any>, projectName: string, timestamp: string): string {
  const docList = Array.from(documents.keys());
  
  return `# ${projectName}

Generated on: ${timestamp}

## Documents

${docList.map(doc => `- [${doc.charAt(0).toUpperCase() + doc.slice(1)} Specification](${doc}-spec.md)`).join('\n')}

## About

This documentation was generated using the SDLC AI Platform CLI.

### Regenerate

To regenerate these documents, run:

\`\`\`bash
sdlc generate "your project description"
\`\`\`

### View Online

Visit [sdlc.dev](https://sdlc.dev) to view and manage your projects online.

---

*Generated by SDLC AI Platform CLI*
`;
}