import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function GET() {
  // Use service role client to access all data including anonymous analytics
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  )

  // Total diagrams generated by logged-in users
  const { count: loggedInDiagrams } = await supabase
    .from('project_generations')
    .select('id', { count: 'exact', head: true })
    .eq('project_type', 'diagram')

  // Total diagrams generated by anonymous users
  const { count: anonymousDiagrams } = await supabase
    .from('anonymous_analytics')
    .select('id', { count: 'exact', head: true })
    .eq('action_type', 'diagram_generation')

  // Total page visits by anonymous users
  const { count: pageVisits } = await supabase
    .from('anonymous_analytics')
    .select('id', { count: 'exact', head: true })
    .eq('action_type', 'page_visit')

  const totalDiagrams = (loggedInDiagrams || 0) + (anonymousDiagrams || 0)

  // Unique users (logged-in)
  const { data: userRows } = await supabase
    .from('project_generations')
    .select('user_id')
    .eq('project_type', 'diagram')

  const userIds = (userRows || []).map(r => r.user_id).filter(Boolean)
  const uniqueUsers = new Set(userIds).size

  // Recent generations from logged-in users
  const { data: recentLoggedIn } = await supabase
    .from('project_generations')
    .select('user_id, metadata, created_at')
    .eq('project_type', 'diagram')
    .order('created_at', { ascending: false })
    .limit(5)

  // Recent generations from anonymous users
  const { data: recentAnonymous } = await supabase
    .from('anonymous_analytics')
    .select('action_data, user_agent, timestamp')
    .eq('action_type', 'diagram_generation')
    .order('timestamp', { ascending: false })
    .limit(5)

  // Recent page visits from anonymous users
  const { data: recentVisits } = await supabase
    .from('anonymous_analytics')
    .select('action_data, user_agent, timestamp')
    .eq('action_type', 'page_visit')
    .order('timestamp', { ascending: false })
    .limit(10)

  // Combine and format recent generations
  const recentGenerations = [
    ...(recentLoggedIn || []).map(gen => ({
      user_id: gen.user_id,
      user_type: 'logged_in',
      action_type: 'diagram_generation',
      metadata: gen.metadata,
      user_agent: gen.metadata?.userAgent,
      input_preview: gen.metadata?.input?.substring(0, 100) || 'N/A',
      created_at: gen.created_at
    })),
    ...(recentAnonymous || []).map(gen => ({
      user_id: null,
      user_type: 'anonymous',
      action_type: 'diagram_generation',
      metadata: gen.action_data,
      user_agent: gen.user_agent,
      input_preview: gen.action_data?.input?.substring(0, 100) || 'N/A',
      created_at: gen.timestamp
    }))
  ].sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
   .slice(0, 10)

  // Format recent visits
  const recentPageVisits = (recentVisits || []).map(visit => ({
    user_type: 'anonymous',
    action_type: 'page_visit',
    page: visit.action_data?.page || 'unknown',
    referrer: visit.action_data?.referrer || 'direct',
    user_agent: visit.user_agent,
    created_at: visit.timestamp
  }))

  return NextResponse.json({
    totalDiagrams,
    loggedInDiagrams: loggedInDiagrams || 0,
    anonymousDiagrams: anonymousDiagrams || 0,
    pageVisits: pageVisits || 0,
    uniqueUsers,
    recentGenerations,
    recentPageVisits
  })
} 