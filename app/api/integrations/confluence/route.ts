import { type NextRequest, NextResponse } from "next/server"

export async function POST(req: NextRequest) {
  try {
    const { 
      config, 
      projectData, 
      documents,
      projectName,
      description 
    } = await req.json()

    console.log('üìö Confluence Integration Request:', { 
      hasConfig: !!config, 
      projectName, 
      hasDocuments: !!documents 
    })

    // Validate Confluence configuration
    if (!config?.confluenceUrl || !config?.confluenceSpace || !config?.confluenceEmail || !config?.confluenceToken) {
      console.error('‚ùå Missing Confluence configuration')
      return NextResponse.json({ 
        success: false, 
        error: 'Missing Confluence configuration (URL, Space Key, Email, or API Token)' 
      }, { status: 400 })
    }

    const confluenceBase = config.confluenceUrl.replace(/\/$/, '')
    const auth = Buffer.from(`${config.confluenceEmail}:${config.confluenceToken}`).toString('base64')
    
    console.log('üîß Confluence Config:', { 
      url: confluenceBase, 
      space: config.confluenceSpace, 
      email: config.confluenceEmail 
    })

    const createdPages = []

    try {
      // Create parent page for the project
      console.log('üìÑ Creating Confluence parent page...')
      
      const parentPagePayload = {
        type: "page",
        title: `${projectName} - SDLC Documentation`,
        space: { key: config.confluenceSpace },
        body: {
          storage: {
            value: `
              <h1>SDLC Documentation for ${projectName}</h1>
              <p><strong>Project Description:</strong> ${description || 'Auto-generated by SDLC Automation Platform'}</p>
              <p><em>Generated on: ${new Date().toLocaleDateString()}</em></p>
              
              <h2>Documentation Structure</h2>
              <ul>
                <li><strong>Business Analysis</strong> - Requirements and business objectives</li>
                <li><strong>Functional Specification</strong> - Feature specifications and user stories</li>
                <li><strong>Technical Specification</strong> - Architecture and technical details</li>
                <li><strong>UX/UI Specification</strong> - User experience and interface design</li>
              </ul>
              
              <p>This documentation was automatically generated by the SDLC Automation Platform.</p>
            `,
            representation: "storage"
          }
        }
      }

      const parentResponse = await fetch(`${confluenceBase}/rest/api/content`, {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${auth}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(parentPagePayload)
      })

      if (!parentResponse.ok) {
        const errorText = await parentResponse.text()
        console.error('‚ùå Parent page creation failed:', errorText)
        throw new Error(`Parent page creation failed: ${errorText}`)
      }

      const parentPage = await parentResponse.json()
      console.log('‚úÖ Parent page created:', parentPage.title)
      createdPages.push({
        type: 'Parent Page',
        title: parentPage.title,
        url: `${confluenceBase}/pages/viewpage.action?pageId=${parentPage.id}`,
        id: parentPage.id
      })

      // Create child pages for each SDLC document
      const documentTypes = [
        { 
          doc: 'businessAnalysis', 
          title: 'Business Analysis', 
          description: 'Business requirements and objectives' 
        },
        { 
          doc: 'functionalSpec', 
          title: 'Functional Specification', 
          description: 'Feature specifications and user stories' 
        },
        { 
          doc: 'technicalSpec', 
          title: 'Technical Specification', 
          description: 'Architecture and technical implementation details' 
        },
        { 
          doc: 'uxSpec', 
          title: 'UX/UI Specification', 
          description: 'User experience and interface design' 
        }
      ]

      for (const docType of documentTypes) {
        if (documents && documents[docType.doc]) {
          console.log(`üìÑ Creating page for ${docType.title}...`)
          
          // Convert markdown to Confluence storage format (simplified)
          const markdownContent = documents[docType.doc]
          const confluenceContent = markdownContent
            .replace(/^# (.*$)/gm, '<h1>$1</h1>')
            .replace(/^## (.*$)/gm, '<h2>$1</h2>')
            .replace(/^### (.*$)/gm, '<h3>$1</h3>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/^(?!<h|<p|<ul|<ol|<li)(.+)$/gm, '<p>$1</p>')

          const childPagePayload = {
            type: "page",
            title: `${docType.title} - ${projectName}`,
            space: { key: config.confluenceSpace },
            ancestors: [{ id: parentPage.id }],
            body: {
              storage: {
                value: `
                  <h1>${docType.title}</h1>
                  <p><strong>Project:</strong> ${projectName}</p>
                  <p><strong>Description:</strong> ${docType.description}</p>
                  <p><em>Generated on: ${new Date().toLocaleDateString()}</em></p>
                  <hr/>
                  
                  ${confluenceContent}
                  
                  <hr/>
                  <p><em>This documentation was automatically generated by the SDLC Automation Platform.</em></p>
                `,
                representation: "storage"
              }
            }
          }

          const childResponse = await fetch(`${confluenceBase}/rest/api/content`, {
            method: 'POST',
            headers: {
              'Authorization': `Basic ${auth}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(childPagePayload)
          })

          if (childResponse.ok) {
            const childPage = await childResponse.json()
            console.log(`‚úÖ Child page created: ${childPage.title}`)
            createdPages.push({
              type: 'Documentation Page',
              title: childPage.title,
              url: `${confluenceBase}/pages/viewpage.action?pageId=${childPage.id}`,
              id: childPage.id
            })
          } else {
            const errorText = await childResponse.text()
            console.error(`‚ùå Child page creation failed for ${docType.title}:`, errorText)
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Confluence page creation error:', error)
      return NextResponse.json({ 
        success: false, 
        error: `Confluence integration failed: ${error.message}` 
      }, { status: 500 })
    }

    console.log('üéâ Confluence integration completed:', createdPages)

    return NextResponse.json({
      success: true,
      message: `Successfully created ${createdPages.length} Confluence pages`,
      pages: createdPages,
      confluenceSpaceUrl: `${confluenceBase}/spaces/${config.confluenceSpace}`
    })

  } catch (error) {
    console.error('‚ùå Confluence integration error:', error)
    return NextResponse.json({ 
      success: false, 
      error: error.message || 'Unknown error occurred' 
    }, { status: 500 })
  }
}
