import { type NextRequest, NextResponse } from "next/server"

export async function POST(req: NextRequest) {
  try {
    const { 
      config, 
      projectData, 
      documents,
      projectName,
      description 
    } = await req.json()

    console.log('üî• JIRA Integration Request:', { 
      hasConfig: !!config, 
      projectName, 
      hasDocuments: !!documents 
    })

    // Validate Jira configuration
    if (!config?.jiraUrl || !config?.jiraProject || !config?.jiraEmail || !config?.jiraToken) {
      console.error('‚ùå Missing Jira configuration')
      return NextResponse.json({ 
        success: false, 
        error: 'Missing Jira configuration (URL, Project Key, Email, or API Token)' 
      }, { status: 400 })
    }

    const jiraBase = config.jiraUrl.replace(/\/$/, '')
    const auth = Buffer.from(`${config.jiraEmail}:${config.jiraToken}`).toString('base64')
    
    console.log('üîß Jira Config:', { 
      url: jiraBase, 
      project: config.jiraProject, 
      email: config.jiraEmail 
    })

    const createdIssues = []

    // Validate and debug project configuration first
    console.log('üîç Validating Jira configuration:')
    console.log('- Jira URL:', config.jiraUrl)
    console.log('- Project Key:', config.jiraProject)
    console.log('- Email:', config.jiraEmail)
    console.log('- Token length:', config.jiraToken?.length || 0)
    
    // Test project accessibility before creating issues
    try {
      console.log('üîç Testing project accessibility...')
      const projectResponse = await fetch(`${jiraBase}/rest/api/3/project/${config.jiraProject}`, {
        headers: {
          'Authorization': `Basic ${auth}`,
          'Content-Type': 'application/json',
        },
      })
      
      if (!projectResponse.ok) {
        const projectError = await projectResponse.text()
        console.error('‚ùå Project validation failed:', projectError)
        return NextResponse.json({ 
          success: false, 
          error: `Cannot access project '${config.jiraProject}': ${projectError}. Please verify the project key exists and you have permission to access it.` 
        })
      }
      
      const projectInfo = await projectResponse.json()
      console.log('‚úÖ Project validated:', projectInfo.name, '- Key:', projectInfo.key)
    } catch (error) {
      console.error('‚ùå Project validation error:', error)
      return NextResponse.json({ 
        success: false, 
        error: `Project validation failed: ${error.message}` 
      })
    }

    // Create Epic for the project if auto-create is enabled
    if (config.jiraAutoCreate) {
      try {
        console.log('üéØ Creating Jira Epic...')
        
        // Try creating Epic first, with fallback to Story if Epic not supported
        let epicPayload = {
          fields: {
            project: { key: config.jiraProject },
            summary: `[EPIC] ${projectName}`,
            description: {
              type: "doc",
              version: 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      type: "text",
                      text: description || `Epic for ${projectName} project - auto-generated by SDLC Automation Platform`
                    }
                  ]
                }
              ]
            },
            issuetype: { name: "Epic" }
            // Removed customfield_10011 (Epic Name) as it's not available in all configurations
          }
        }

        let epicResponse = await fetch(`${jiraBase}/rest/api/3/issue`, {
          method: 'POST',
          headers: {
            'Authorization': `Basic ${auth}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(epicPayload)
        })

        // If Epic creation fails, try creating a Story instead
        if (!epicResponse.ok) {
          const epicError = await epicResponse.text()
          console.warn('‚ö†Ô∏è Epic creation failed, trying Story instead:', epicError)
          
          // Fallback to Story creation
          const storyPayload = {
            fields: {
              project: { key: config.jiraProject },
              summary: `[STORY] ${projectName} - Main Epic`,
              description: {
                type: "doc",
                version: 1,
                content: [
                  {
                    type: "paragraph",
                    content: [
                      {
                        type: "text",
                        text: description || `Main story for ${projectName} project - auto-generated by SDLC Automation Platform`
                      }
                    ]
                  }
                ]
              },
              issuetype: { name: "Story" }
            }
          }
          
          epicResponse = await fetch(`${jiraBase}/rest/api/3/issue`, {
            method: 'POST',
            headers: {
              'Authorization': `Basic ${auth}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(storyPayload)
          })
          
          if (!epicResponse.ok) {
            const storyError = await epicResponse.text()
            console.error('‚ùå Both Epic and Story creation failed:', storyError)
            throw new Error(`Issue creation failed: ${storyError}`)
          }
          
          console.log('‚úÖ Created Story as Epic fallback')
        } else {
          console.log('‚úÖ Epic created successfully')
        }

        const epic = await epicResponse.json()
        console.log('‚úÖ Epic created:', epic.key)
        createdIssues.push({
          type: 'Epic',
          key: epic.key,
          url: `${jiraBase}/browse/${epic.key}`,
          summary: epicPayload.fields.summary
        })

        // Create tasks for each SDLC document
        const taskTypes = [
          { doc: 'businessAnalysis', title: 'Business Analysis', type: 'Task' },
          { doc: 'functionalSpec', title: 'Functional Specification', type: 'Task' },
          { doc: 'technicalSpec', title: 'Technical Specification', type: 'Task' },
          { doc: 'uxSpec', title: 'UX/UI Specification', type: 'Task' }
        ]

        for (const taskType of taskTypes) {
          if (documents && documents[taskType.doc]) {
            console.log(`üéØ Creating task for ${taskType.title}...`)
            
            const taskPayload = {
              fields: {
                project: { key: config.jiraProject },
                summary: `${taskType.title} - ${projectName} [Related to ${epic.key}]`,
                description: {
                  type: "doc",
                  version: 1,
                  content: [
                    {
                      type: "paragraph",
                      content: [
                        {
                          type: "text",
                          text: `${taskType.title} documentation for ${projectName}. Related to Epic ${epic.key}. Auto-generated by SDLC Automation Platform.`
                        }
                      ]
                    }
                  ]
                },
                issuetype: { name: taskType.type }
                // Removed customfield_10014 (Epic Link) as it's not available in all project configurations
                // Epic relationship is indicated in summary and description instead
              }
            }

            const taskResponse = await fetch(`${jiraBase}/rest/api/3/issue`, {
              method: 'POST',
              headers: {
                'Authorization': `Basic ${auth}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(taskPayload)
            })

            if (taskResponse.ok) {
              const task = await taskResponse.json()
              console.log(`‚úÖ Task created: ${task.key}`)
              createdIssues.push({
                type: taskType.type,
                key: task.key,
                url: `${jiraBase}/browse/${task.key}`,
                summary: taskPayload.fields.summary
              })
            } else {
              const errorText = await taskResponse.text()
              console.error(`‚ùå Task creation failed for ${taskType.title}:`, errorText)
            }
          }
        }

      } catch (error) {
        console.error('‚ùå Jira Epic/Task creation error:', error)
        return NextResponse.json({ 
          success: false, 
          error: `Jira integration failed: ${error.message}` 
        }, { status: 500 })
      }
    }

    console.log('üéâ Jira integration completed:', createdIssues)

    return NextResponse.json({
      success: true,
      message: `Successfully created ${createdIssues.length} Jira issues`,
      issues: createdIssues,
      jiraProjectUrl: `${jiraBase}/projects/${config.jiraProject}`
    })

  } catch (error) {
    console.error('‚ùå Jira integration error:', error)
    return NextResponse.json({ 
      success: false, 
      error: error.message || 'Unknown error occurred' 
    }, { status: 500 })
  }
}
