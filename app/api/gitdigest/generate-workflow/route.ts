import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

/**
 * Generate GitHub Actions workflow for GitDigest automation
 * Returns a workflow file that users can easily add to their repository
 */
export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Get authenticated user
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { repository, settings } = await request.json()

    // Generate a user-specific token for the workflow
    const userToken = await generateUserToken(user.id)

    // Create customized workflow based on user settings
    const workflow = generateWorkflowYaml({
      repository,
      userToken,
      triggers: settings?.triggers || {
        push: true,
        pullRequest: true,
        schedule: 'daily'
      }
    })

    // Also generate the setup instructions
    const setupInstructions = generateSetupInstructions(repository, userToken)

    return NextResponse.json({
      workflow,
      setupInstructions,
      tokenName: 'SDLC_USER_TOKEN',
      tokenValue: userToken,
      filename: '.github/workflows/gitdigest.yml'
    })

  } catch (error) {
    console.error('Error generating workflow:', error)
    return NextResponse.json({ 
      error: 'Failed to generate workflow' 
    }, { status: 500 })
  }
}

function generateWorkflowYaml(config: any): string {
  const { repository, userToken, triggers } = config
  
  let onTriggers = []
  
  if (triggers.push) {
    onTriggers.push(`  push:
    branches: [main, master]`)
  }
  
  if (triggers.pullRequest) {
    onTriggers.push(`  pull_request:
    types: [closed]
    branches: [main, master]`)
  }
  
  if (triggers.schedule === 'daily') {
    onTriggers.push(`  schedule:
    - cron: '0 9 * * *' # Daily at 9 AM UTC`)
  } else if (triggers.schedule === 'weekly') {
    onTriggers.push(`  schedule:
    - cron: '0 9 * * 1' # Weekly on Monday at 9 AM UTC`)
  }

  return `name: GitDigest Automation
# Generated by SDLC.dev - AI-powered repository insights

on:
${onTriggers.join('\n')}
  workflow_dispatch: # Allow manual trigger

jobs:
  gitdigest:
    name: Generate Repository Digest
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate analysis

      - name: Trigger GitDigest Analysis
        env:
          SDLC_USER_TOKEN: \${{ secrets.SDLC_USER_TOKEN }}
        run: |
          echo "🔍 Triggering GitDigest analysis for \${{ github.repository }}"
          
          response=$(curl -X POST https://sdlc.dev/api/gitdigest/webhook \\
            -H "Authorization: Bearer \${SDLC_USER_TOKEN}" \\
            -H "Content-Type: application/json" \\
            -d '{
              "trigger": {
                "type": "\${{ github.event_name }}",
                "context": {
                  "actor": "\${{ github.actor }}",
                  "ref": "\${{ github.ref }}",
                  "sha": "\${{ github.sha }}"
                }
              },
              "repository": {
                "url": "https://github.com/\${{ github.repository }}",
                "full_name": "\${{ github.repository }}",
                "default_branch": "\${{ github.event.repository.default_branch }}"
              },
              "changes": {
                "commit_count": "\${{ github.event.commits && github.event.commits.length || 0 }}",
                "head_commit": "\${{ github.event.head_commit.message || '' }}"
              },
              "github": {
                "event_name": "\${{ github.event_name }}",
                "workflow": "\${{ github.workflow }}",
                "run_id": "\${{ github.run_id }}",
                "run_number": "\${{ github.run_number }}"
              }
            }' \\
            -w "\\nHTTP_STATUS:%{http_code}")
          
          http_status=$(echo "$response" | tail -n 1 | cut -d':' -f2)
          body=$(echo "$response" | head -n -1)
          
          if [ "$http_status" -eq 200 ] || [ "$http_status" -eq 202 ]; then
            echo "✅ GitDigest analysis triggered successfully"
            echo "$body" | jq '.'
          else
            echo "❌ Failed to trigger GitDigest analysis"
            echo "HTTP Status: $http_status"
            echo "Response: $body"
            exit 1
          fi

      - name: Summary
        if: success()
        run: |
          echo "## GitDigest Analysis Triggered 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** \${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** \${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View your digest at [SDLC.dev Dashboard](https://sdlc.dev/dashboard)" >> $GITHUB_STEP_SUMMARY
`
}

function generateSetupInstructions(repository: string, token: string): string {
  return `
## Setup Instructions for ${repository}

### Step 1: Add the Workflow File
1. Create a new file in your repository at: \`.github/workflows/gitdigest.yml\`
2. Copy and paste the generated workflow content
3. Commit the file to your main branch

### Step 2: Add the Secret Token
1. Go to your repository settings
2. Navigate to Settings → Secrets and variables → Actions
3. Click "New repository secret"
4. Name: \`SDLC_USER_TOKEN\`
5. Value: \`${token}\`
6. Click "Add secret"

### Step 3: Test the Workflow
1. Go to the Actions tab in your repository
2. Select "GitDigest Automation" workflow
3. Click "Run workflow" to test manually
4. Check the SDLC.dev dashboard for your generated digest

### Alternative: Quick Setup via GitHub CLI
\`\`\`bash
# Add the workflow file
echo "[workflow content]" > .github/workflows/gitdigest.yml
git add .github/workflows/gitdigest.yml
git commit -m "Add GitDigest automation"
git push

# Add the secret (requires GitHub CLI)
gh secret set SDLC_USER_TOKEN --body="${token}"
\`\`\`

### Customization Options
- Modify the cron schedule in the workflow file
- Add or remove trigger events
- Customize which branches trigger analysis

For more information, visit: https://sdlc.dev/docs/gitdigest
`
}

async function generateUserToken(userId: string): Promise<string> {
  // In production, this would:
  // 1. Generate a secure token
  // 2. Store it in the database associated with the user
  // 3. Return the token for the user to add to their GitHub secrets
  
  // For now, return a placeholder
  const token = `sdlc_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  
  // Store token in database (implement this based on your schema)
  // await storeUserToken(userId, token)
  
  return token
}